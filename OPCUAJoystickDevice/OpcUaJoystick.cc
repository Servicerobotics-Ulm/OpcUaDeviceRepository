//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------

#include "OpcUaJoystick.hh"
	
namespace OPCUA {

Joystick::Joystick(JoystickInterface *controller)
:	OPCUA::GenericServer("Joystick")
,	controller(controller)
{
	
}
Joystick::~Joystick()
{  }

bool Joystick::createServerSpace() 
{
	// add variable Xpos
	bool XposReadOnly = true;
	int XposValue = 0;
	if(addVariableNode("Xpos", XposValue, XposReadOnly) != true) {
		std::cout << "failed adding Xpos" << std::endl;
		return false;
	}
	
	// add variable Ypos
	bool YposReadOnly = true;
	int YposValue = 0;
	if(addVariableNode("Ypos", YposValue, YposReadOnly) != true) {
		std::cout << "failed adding Ypos" << std::endl;
		return false;
	}
	
	// add variable X2pos
	bool X2posReadOnly = true;
	int X2posValue = 0;
	if(addVariableNode("X2pos", X2posValue, X2posReadOnly) != true) {
		std::cout << "failed adding X2pos" << std::endl;
		return false;
	}
	
	// add variable Y2pos
	bool Y2posReadOnly = true;
	int Y2posValue = 0;
	if(addVariableNode("Y2pos", Y2posValue, Y2posReadOnly) != true) {
		std::cout << "failed adding Y2pos" << std::endl;
		return false;
	}
	
	// add variable BUTTONS
	bool BUTTONSReadOnly = true;
	int BUTTONSValue = 0;
	if(addVariableNode("BUTTONS", BUTTONSValue, BUTTONSReadOnly) != true) {
		std::cout << "failed adding BUTTONS" << std::endl;
		return false;
	}
	
	// add variable BUTTON_0
	bool BUTTON_0ReadOnly = true;
	bool BUTTON_0Value = false;
	if(addVariableNode("BUTTON_0", BUTTON_0Value, BUTTON_0ReadOnly) != true) {
		std::cout << "failed adding BUTTON_0" << std::endl;
		return false;
	}
	
	// add variable BUTTON_1
	bool BUTTON_1ReadOnly = true;
	bool BUTTON_1Value = false;
	if(addVariableNode("BUTTON_1", BUTTON_1Value, BUTTON_1ReadOnly) != true) {
		std::cout << "failed adding BUTTON_1" << std::endl;
		return false;
	}
	
	// add variable BUTTON_2
	bool BUTTON_2ReadOnly = true;
	bool BUTTON_2Value = false;
	if(addVariableNode("BUTTON_2", BUTTON_2Value, BUTTON_2ReadOnly) != true) {
		std::cout << "failed adding BUTTON_2" << std::endl;
		return false;
	}
	
	// add variable BUTTON_3
	bool BUTTON_3ReadOnly = true;
	bool BUTTON_3Value = false;
	if(addVariableNode("BUTTON_3", BUTTON_3Value, BUTTON_3ReadOnly) != true) {
		std::cout << "failed adding BUTTON_3" << std::endl;
		return false;
	}
	
	// add variable BUTTON_4
	bool BUTTON_4ReadOnly = true;
	bool BUTTON_4Value = false;
	if(addVariableNode("BUTTON_4", BUTTON_4Value, BUTTON_4ReadOnly) != true) {
		std::cout << "failed adding BUTTON_4" << std::endl;
		return false;
	}
	
	// add variable BUTTON_5
	bool BUTTON_5ReadOnly = true;
	bool BUTTON_5Value = false;
	if(addVariableNode("BUTTON_5", BUTTON_5Value, BUTTON_5ReadOnly) != true) {
		std::cout << "failed adding BUTTON_5" << std::endl;
		return false;
	}
	
	// add variable BUTTON_6
	bool BUTTON_6ReadOnly = true;
	bool BUTTON_6Value = false;
	if(addVariableNode("BUTTON_6", BUTTON_6Value, BUTTON_6ReadOnly) != true) {
		std::cout << "failed adding BUTTON_6" << std::endl;
		return false;
	}
	
	// add variable BUTTON_7
	bool BUTTON_7ReadOnly = true;
	bool BUTTON_7Value = false;
	if(addVariableNode("BUTTON_7", BUTTON_7Value, BUTTON_7ReadOnly) != true) {
		std::cout << "failed adding BUTTON_7" << std::endl;
		return false;
	}
	
	
	return true;
}

void Joystick::handleOnRead(const std::string &browseName, ValueType &value)
{
	if(browseName == "Xpos") {
		int Xpos;
		if(controller->getXpos(Xpos) == OPCUA::StatusCode::ALL_OK) {
			value = Xpos;
		}
	} else if(browseName == "Ypos") {
		int Ypos;
		if(controller->getYpos(Ypos) == OPCUA::StatusCode::ALL_OK) {
			value = Ypos;
		}
	} else if(browseName == "X2pos") {
		int X2pos;
		if(controller->getX2pos(X2pos) == OPCUA::StatusCode::ALL_OK) {
			value = X2pos;
		}
	} else if(browseName == "Y2pos") {
		int Y2pos;
		if(controller->getY2pos(Y2pos) == OPCUA::StatusCode::ALL_OK) {
			value = Y2pos;
		}
	} else if(browseName == "BUTTONS") {
		int BUTTONS;
		if(controller->getBUTTONS(BUTTONS) == OPCUA::StatusCode::ALL_OK) {
			value = BUTTONS;
		}
	} else if(browseName == "BUTTON_0") {
		bool BUTTON_0;
		if(controller->getBUTTON_0(BUTTON_0) == OPCUA::StatusCode::ALL_OK) {
			value = BUTTON_0;
		}
	} else if(browseName == "BUTTON_1") {
		bool BUTTON_1;
		if(controller->getBUTTON_1(BUTTON_1) == OPCUA::StatusCode::ALL_OK) {
			value = BUTTON_1;
		}
	} else if(browseName == "BUTTON_2") {
		bool BUTTON_2;
		if(controller->getBUTTON_2(BUTTON_2) == OPCUA::StatusCode::ALL_OK) {
			value = BUTTON_2;
		}
	} else if(browseName == "BUTTON_3") {
		bool BUTTON_3;
		if(controller->getBUTTON_3(BUTTON_3) == OPCUA::StatusCode::ALL_OK) {
			value = BUTTON_3;
		}
	} else if(browseName == "BUTTON_4") {
		bool BUTTON_4;
		if(controller->getBUTTON_4(BUTTON_4) == OPCUA::StatusCode::ALL_OK) {
			value = BUTTON_4;
		}
	} else if(browseName == "BUTTON_5") {
		bool BUTTON_5;
		if(controller->getBUTTON_5(BUTTON_5) == OPCUA::StatusCode::ALL_OK) {
			value = BUTTON_5;
		}
	} else if(browseName == "BUTTON_6") {
		bool BUTTON_6;
		if(controller->getBUTTON_6(BUTTON_6) == OPCUA::StatusCode::ALL_OK) {
			value = BUTTON_6;
		}
	} else if(browseName == "BUTTON_7") {
		bool BUTTON_7;
		if(controller->getBUTTON_7(BUTTON_7) == OPCUA::StatusCode::ALL_OK) {
			value = BUTTON_7;
		}
	}
}

void Joystick::handleOnWrite(const std::string &browseName, const ValueType &value)
{
	// propagate the write calls to respective upcalls (only if write access is activated)
}

void Joystick::handleMethodCall(const std::string &browseName, const std::vector<ValueType> &inputs, std::vector<ValueType> &outputs)
{
}

} /* namespace OPCUA */
