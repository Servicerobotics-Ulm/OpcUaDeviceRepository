//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------

#include "OpcUaTrafficlight.hh"
	
namespace OPCUA {

Trafficlight::Trafficlight(TrafficlightInterface *controller)
:	OPCUA::GenericServer("Trafficlight")
,	controller(controller)
{
	
}
Trafficlight::~Trafficlight()
{  }

bool Trafficlight::createServerSpace() 
{
	// add variable LED_RED
	bool LED_REDReadOnly = false;
	bool LED_REDValue = false;
	if(addVariableNode("LED_RED", LED_REDValue, LED_REDReadOnly) != true) {
		std::cout << "failed adding LED_RED" << std::endl;
		return false;
	}
	
	// add variable LED_YELLOW
	bool LED_YELLOWReadOnly = false;
	bool LED_YELLOWValue = false;
	if(addVariableNode("LED_YELLOW", LED_YELLOWValue, LED_YELLOWReadOnly) != true) {
		std::cout << "failed adding LED_YELLOW" << std::endl;
		return false;
	}
	
	// add variable LED_GREEN
	bool LED_GREENReadOnly = false;
	bool LED_GREENValue = false;
	if(addVariableNode("LED_GREEN", LED_GREENValue, LED_GREENReadOnly) != true) {
		std::cout << "failed adding LED_GREEN" << std::endl;
		return false;
	}
	
	
	return true;
}

void Trafficlight::handleOnRead(const std::string &browseName, Variant &value)
{
	if(browseName == "LED_RED") {
		bool LED_RED;
		if(controller->getLED_RED(LED_RED) == OPCUA::StatusCode::ALL_OK) {
			value = LED_RED;
		}
	} else if(browseName == "LED_YELLOW") {
		bool LED_YELLOW;
		if(controller->getLED_YELLOW(LED_YELLOW) == OPCUA::StatusCode::ALL_OK) {
			value = LED_YELLOW;
		}
	} else if(browseName == "LED_GREEN") {
		bool LED_GREEN;
		if(controller->getLED_GREEN(LED_GREEN) == OPCUA::StatusCode::ALL_OK) {
			value = LED_GREEN;
		}
	}
}

void Trafficlight::handleOnWrite(const std::string &browseName, const Variant &value)
{
	// propagate the write calls to respective upcalls (only if write access is activated)
	if(browseName == "LED_RED") {
		controller->setLED_RED(value);
	} else if(browseName == "LED_YELLOW") {
		controller->setLED_YELLOW(value);
	} else if(browseName == "LED_GREEN") {
		controller->setLED_GREEN(value);
	}
}

void Trafficlight::handleMethodCall(const std::string &browseName, const std::vector<Variant> &inputs, std::vector<Variant> &outputs)
{
}

} /* namespace OPCUA */
